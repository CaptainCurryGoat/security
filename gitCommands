GIT COMMANDS
------------
Most of my notes originated from 'Git Essential Training' from lynda.com

Track your Repository
---------------------
Navigate to your root project folder and execute the following.
	git init
This will track all the files created in this directory.


Add changes to entire project directory
---------------------------------------
If you're in the directory where you're 
mkaing changes, execute the follwing..
	git add .

Commit changes
--------------
Committing a change will save the file
in memory.
	git commit -m "Initial commit"

View commit log
---------------
git log

To limit the number of commits returned
	git log -n 1 <- Tells git to return only 1 commit.

Specify gits by date
	git log --since=2017-02-24

To view commits by author only

CONFIGURE GIT
-------------
To make changes at the user level, use the keyword global.
Now set your name and email to the .github file (ls -la in your users dir)
git config --global user.name "Daniel Edwards"
git config --global user.email "myemail@gmail.com"

You can also set the editor you like to use
git config --global core.editor "nano -wl1".
w - will tell nano to wait.
l1 - tells nano to start at line 1.

REMOVING/DELETING FILES
-----------------------
Dragging and dropping your files into the trash can
will not completly remove it from the repo. Running
git status will show the "Changes not staged for commit" message.

Use the following command to remove it completly.
	git rm file

Running git status will show the "Changes to be committed message".


MOVING AND RENAMING FILES
-------------------------
Renaming a file can trick git into thinking the file was deleted.
It will see the new file and return an "Untracked files" message.

Add the changes to the staging index by adding the new name of the
text file and removing the name of the old file.
	git add new_file_name
	git rm old_file_name
Running git status again will show that git recognizes that the
file name was changed.


SHOW DIFFERENCES BETWEEN FILES
------------------------------
To compare the differences between two files type the following..
	git diff file_name

To only show the changes that were made instead of the entire file..
	git diff --color-words file_name


COMMIT AND ADD FILES
--------------------
You can add files to the staging index and commit
at the same time. This grabs everything in your working directory.
Files that are not tracked or being deleted will not get added.
	git commit -am "message"








CHAPTER 7 UNDOING CHANGES
-------------------------

1) Undoing working directory changes
   	To undo an accidental or purposeful delete/edit to a file(s) use the git checkout 
   	command followed by the name of the file. 
		git checkout file_name.
	
   	The above command will make changes to the entire branch. To specifiy just the file
   	name....
		git checkout -- file_name

2) Unstaging Files
   	You stage a file whenever you add it (git add file_name). You would unstage a file
   	if you were to accidentally add it.
  		git reset HEAD file_name

3) Amending Commits
   	You can only change the last commit as nothing depends on it. Use the ammend option.
		git commit --ammend -m "write your message here"

	You can also change the last message in your commit with the ammend option.
		git commit --ammend -m "write all of your messages here".

4) Retrieving Old Versions
	Type git log to display the SHA ID. Copy either the second hash ID or a part of it. Type
	'git checkout' and paste the portion of the copied hash ID.	
		git checkout csdkj2834923y489lm12 -- file_name
	
	Now type git diff --staged to compare the old and new versions. The items in red are the 
	current version, the items at the bottom are the older versions. 

	Commit the changes to revert back to the previous version.

5) Reverting a commit
	Undo the changes to a commit. Using the revert command, it will do the opposite of your changes.
	Anything that was added, will be deleted and vice versa. Grab a part of the hash ID paste after 
	the following...
		git revert 81sdfh8@&!12klf 
